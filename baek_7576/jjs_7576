#include <cstdio>
#include <queue>
using namespace std;
int X, Y;
int arr[1001][1001];
int visit[1001][1001];
int etoma, nottoma;

typedef struct {
	int x, y,day;
}node;
node tomato[1001 * 1001];
queue<node>Q;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
int result;
void BFS() {
	node cur, nex;
	for (int i = 1; i <= etoma; i++) {
		nex.x = tomato[i].x;
		nex.y = tomato[i].y;
		nex.day = 0;
		visit[nex.y][nex.x] = 1;
		Q.push(nex);
	}
	while (!Q.empty()) {
		cur = Q.front(); Q.pop();
		result = cur.day;
		for (int i = 0; i < 4; i++) {
			int fx, fy;
			fx = nex.x = cur.x + dx[i];
			fy = nex.y = cur.y + dy[i];
			
			if (fx <1 || fx > X || fy <1 || fy > Y)continue;
			if (visit[fy][fx] == 1 || arr[fy][fx] != 0)continue;
			nex.day = cur.day + 1;
			visit[fy][fx] = 1;
			arr[fy][fx] = 1;
			Q.push(nex);

		}
	}


}

bool flag = true;

int main() {
	scanf("%d %d", &X, &Y);
	for (int i = 1; i <= Y; i++) {
		for (int j = 1; j <= X; j++) {
			scanf("%d", &arr[i][j]);
			if (arr[i][j] == 1) {
				etoma++;
				tomato[etoma].x = j;
				tomato[etoma].y = i;
			}
			if (arr[i][j] == 0)nottoma++;
		}
	}
	if (nottoma == 0) {
		printf("0");		
	}
	else {
		BFS();
		for (int i = 1; i <= Y; i++) {
			for (int j = 1; j <= X; j++) {
				if (arr[i][j] == 0) {
					printf("-1");
					flag = false;
					break;
				}
			}
		}
		if (flag == true)printf("%d", result);
	}

	return 0;
}
